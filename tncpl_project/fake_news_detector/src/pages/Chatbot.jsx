import {
  Box,
  Button,
  FormControl,
  HStack,
  IconButton,
  Image,
  Input,
  InputGroup,
  InputRightElement,
  Text,
  Heading,
  Spacer,
} from "@chakra-ui/react";
import React, { useState } from "react";
import { IoSendSharp } from "react-icons/io5";
import { MdCancel } from "react-icons/md";
import ChatBubble from "../components/ChatBubble";
import axios from "axios";

const Chatbot = ({ chatbot }) => {
  const HTTP_SERVER = "http://127.0.0.1:5000/chatbot";
  const [error, setError] = useState("");
  const [input, setInput] = useState("");
  const [isChatBot, setIsChaTBot] = useState(chatbot);
  const [responses, setResponses] = useState([
    {
      id: "receiver",
      data: "how can i assist with you?",
    },
  ]);
  const [loading, isLoading] = useState(false);
  const handleSubmitMessage = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    setResponses([
      ...responses,
      {
        id: "sender",
        data: input,
      },
    ]);
    setError("");
    // console.log(messgae);
    isLoading(true);
    setInput("");
    try {
      const data = await axios.post(HTTP_SERVER, {
        input: input,
      });
      console.log(data.data);
      console.log(responses);
      setResponses([
        ...responses,
        {
          id: "receiver",
          data: data.data.data,
        },
      ]);
      console.log(data.data.data[0]["generated_text"]);
      console.log(responses);
      isLoading(false);
    } catch (error) {
      setError("Failed to fetch response .Please try again");
      isLoading(false);
    }

    isLoading(false);
  };
  return (
    isChatBot && (
      <Box
        h={"500px"}
        w={"300px"}
        bg={"white"}
        position={"absolute"}
        bottom={0}
        left={0}
        border={"10px solid black"}
      >
        <HStack bg={"blue.400"} p={2}>
          <Image src="src/assets/chatbot.jpg" h={10} borderRadius={"2rem"} />
          <Text fontWeight={500} fontSize={"1rem"} textAlign={"center"}>
            Chatbot
          </Text>

          <IconButton
            icon={<MdCancel />}
            onClick={() => setIsChaTBot(false)}
            ms={"auto"}
            bg={"none"}
            fontSize={"1.3rem"}
          />
        </HStack>
        <Box bg={"red"} color={"white"} fontWeight={900} h={"fit-content"}>
          <marquee direction="left" loop="">
            <Heading textAlign={"center"} size={"sm"} h={"fit-content"}>
              Disclaimer
            </Heading>
            <Text>
              All the text we are providing is completely generated by AI. So
              please ,Careful with that information
            </Text>
          </marquee>
        </Box>

        <Box
          overflowY={"scroll"}
          h={"65%"}
          px={5}
          scrollBehavior={"smooth"}
          padding={0}
          pb={10}
          mb={10}
        >
          <ul
            style={{
              padding: 0,
            }}
          >
            {responses.map((val, index) => (
              <li
                style={{
                  listStyle: "none",
                }}
                key={index}
              >
                <HStack
                  w={"100%"}
                  justifyContent={val.id == "sender" ? "start" : "end"}
                >
                  <ChatBubble value={val.data} pos={val.id} />
                </HStack>
              </li>
            ))}

            {error && (
              <Text color={"red"} p={2}>
                {error}
              </Text>
            )}

            {loading && <Button bg={"none"} isLoading={loading}></Button>}
          </ul>
        </Box>
        <Spacer />

        <Box
          position={"absolute"}
          bottom={-2}
          w={"100%"}
          px={5}
          py={2}
          zIndex={5}
        >
          <FormControl onSubmit={handleSubmitMessage}>
            <InputGroup>
              <Input
                type="text"
                px={2}
                border={"2px solid black"}
                value={input}
                onChange={(e) => setInput(e.target.value)}
              />
              <InputRightElement>
                <IoSendSharp type="submit" onClick={handleSubmitMessage} />
              </InputRightElement>
            </InputGroup>
          </FormControl>
        </Box>
      </Box>
    )
  );
};

export default Chatbot;
